name: Test AI Models

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-ai-models:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_KEY }}
          FAL_API_KEY=${{ secrets.FAL_API_KEY }}
          DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          EOF
      
      - name: Create AI Model Tests
        run: |
          mkdir -p tests
          cat > tests/ai-model-tests.js << EOF
          import fetch from 'node-fetch';
          import { OpenAI } from 'openai';
          import { GoogleGenerativeAI } from '@google/generative-ai';
          import Anthropic from '@anthropic-ai/sdk';
          import { createClient } from '@fal-ai/client';
          
          const TEST_PROMPT = "Hello, can you respond with a short greeting?";
          
          async function testOpenAI() {
            console.log("\n🧪 Testing OpenAI model...");
            try {
              const openai = new OpenAI({
                apiKey: process.env.OPENAI_API_KEY,
              });
              
              const response = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: TEST_PROMPT }],
                max_tokens: 50,
              });
              
              console.log("✅ OpenAI response:", response.choices[0].message.content);
              return true;
            } catch (error) {
              console.error("❌ OpenAI test failed:", error.message);
              return false;
            }
          }
          
          async function testGemini() {
            console.log("\n🧪 Testing Google Gemini model...");
            try {
              const genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY);
              const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
              
              const result = await model.generateContent(TEST_PROMPT);
              const response = await result.response;
              const text = response.text();
              
              console.log("✅ Gemini response:", text);
              return true;
            } catch (error) {
              console.error("❌ Gemini test failed:", error.message);
              return false;
            }
          }
          
          async function testAnthropic() {
            console.log("\n🧪 Testing Anthropic model...");
            try {
              const anthropic = new Anthropic({
                apiKey: process.env.ANTHROPIC_API_KEY,
              });
              
              const message = await anthropic.messages.create({
                model: "claude-3-haiku-20240307",
                max_tokens: 50,
                messages: [{ role: "user", content: TEST_PROMPT }],
              });
              
              console.log("✅ Anthropic response:", message.content[0].text);
              return true;
            } catch (error) {
              console.error("❌ Anthropic test failed:", error.message);
              return false;
            }
          }
          
          async function testFalAI() {
            console.log("\n🧪 Testing Fal.AI model...");
            try {
              const falClient = createClient({
                credentials: process.env.FAL_API_KEY,
              });
              
              const result = await falClient.subscribe("fal-ai/llama-2-70b-chat", {
                input: {
                  prompt: TEST_PROMPT,
                  max_tokens: 50,
                  temperature: 0.7,
                  sync_mode: true
                },
              });
              
              console.log("✅ Fal.AI response:", result.data.response || result.data.generated_text);
              return true;
            } catch (error) {
              console.error("❌ Fal.AI test failed:", error.message);
              return false;
            }
          }
          
          async function testDeepseek() {
            console.log("\n🧪 Testing DeepSeek model...");
            try {
              // Using fetch for DeepSeek as it might not have a dedicated SDK
              const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': \`Bearer \${process.env.DEEPSEEK_API_KEY}\`
                },
                body: JSON.stringify({
                  model: 'deepseek-chat',
                  messages: [{ role: 'user', content: TEST_PROMPT }],
                  max_tokens: 50
                })
              });
              
              const data = await response.json();
              console.log("✅ DeepSeek response:", data.choices[0].message.content);
              return true;
            } catch (error) {
              console.error("❌ DeepSeek test failed:", error.message);
              return false;
            }
          }
          
          async function runTests() {
            console.log("Starting AI model tests...");
            
            const results = {
              openai: await testOpenAI(),
              gemini: await testGemini(),
              anthropic: await testAnthropic(),
              falai: await testFalAI(),
              deepseek: await testDeepseek()
            };
            
            console.log("\n🔍 Test Summary:");
            Object.entries(results).forEach(([model, success]) => {
              console.log(\`\${model}: \${success ? '✅ PASSED' : '❌ FAILED'}\`);
            });
            
            const failedTests = Object.values(results).filter(result => !result).length;
            if (failedTests > 0) {
              console.error(\`\n❌ \${failedTests} tests failed!\`);
              process.exit(1);
            } else {
              console.log("\n🎉 All tests passed!");
            }
          }
          
          runTests().catch(error => {
            console.error("Test suite failed:", error);
            process.exit(1);
          });
          EOF
      
      - name: Run AI model tests
        run: node tests/ai-model-tests.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_KEY }}
          FAL_API_KEY: ${{ secrets.FAL_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }} 